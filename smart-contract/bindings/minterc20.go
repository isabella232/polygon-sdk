// Code generated by go-web3/abigen. DO NOT EDIT.
// Hash: cd993493422e809b0e57766486a621d16872d8f603b9addc7838c2510a2fd9f5
package bindings

import (
	"fmt"
	"math/big"

	web3 "github.com/umbracle/go-web3"
	"github.com/umbracle/go-web3/contract"
	"github.com/umbracle/go-web3/jsonrpc"
)

var (
	_ = big.NewInt
)

// MintERC20 is a solidity contract
type MintERC20 struct {
	c *contract.Contract
}

// DeployMintERC20 deploys a new MintERC20 contract
func DeployMintERC20(provider *jsonrpc.Client, from web3.Address, args ...interface{}) *contract.Txn {
	return contract.DeployContract(provider, from, abiMintERC20, binMintERC20, args...)
}

// NewMintERC20 creates a new instance of the contract at a specific address
func NewMintERC20(addr web3.Address, provider *jsonrpc.Client) *MintERC20 {
	return &MintERC20{c: contract.NewContract(addr, abiMintERC20, provider)}
}

// Contract returns the contract object
func (m *MintERC20) Contract() *contract.Contract {
	return m.c
}

// calls

// Allowance calls the allowance method in the solidity contract
func (m *MintERC20) Allowance(owner web3.Address, spender web3.Address, block ...web3.BlockNumber) (retval0 *big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = m.c.Call("allowance", web3.EncodeBlock(block...), owner, spender)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// BalanceOf calls the balanceOf method in the solidity contract
func (m *MintERC20) BalanceOf(account web3.Address, block ...web3.BlockNumber) (retval0 *big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = m.c.Call("balanceOf", web3.EncodeBlock(block...), account)
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// Decimals calls the decimals method in the solidity contract
func (m *MintERC20) Decimals(block ...web3.BlockNumber) (retval0 uint8, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = m.c.Call("decimals", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(uint8)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// Name calls the name method in the solidity contract
func (m *MintERC20) Name(block ...web3.BlockNumber) (retval0 string, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = m.c.Call("name", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(string)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// Symbol calls the symbol method in the solidity contract
func (m *MintERC20) Symbol(block ...web3.BlockNumber) (retval0 string, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = m.c.Call("symbol", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(string)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// TotalSupply calls the totalSupply method in the solidity contract
func (m *MintERC20) TotalSupply(block ...web3.BlockNumber) (retval0 *big.Int, err error) {
	var out map[string]interface{}
	var ok bool

	out, err = m.c.Call("totalSupply", web3.EncodeBlock(block...))
	if err != nil {
		return
	}

	// decode outputs
	retval0, ok = out["0"].(*big.Int)
	if !ok {
		err = fmt.Errorf("failed to encode output at index 0")
		return
	}
	
	return
}

// txns

// Approve sends a approve transaction in the solidity contract
func (m *MintERC20) Approve(spender web3.Address, amount *big.Int) *contract.Txn {
	return m.c.Txn("approve", spender, amount)
}

// DecreaseAllowance sends a decreaseAllowance transaction in the solidity contract
func (m *MintERC20) DecreaseAllowance(spender web3.Address, subtractedValue *big.Int) *contract.Txn {
	return m.c.Txn("decreaseAllowance", spender, subtractedValue)
}

// IncreaseAllowance sends a increaseAllowance transaction in the solidity contract
func (m *MintERC20) IncreaseAllowance(spender web3.Address, addedValue *big.Int) *contract.Txn {
	return m.c.Txn("increaseAllowance", spender, addedValue)
}

// Mint sends a mint transaction in the solidity contract
func (m *MintERC20) Mint(amount *big.Int) *contract.Txn {
	return m.c.Txn("mint", amount)
}

// MintTo sends a mintTo transaction in the solidity contract
func (m *MintERC20) MintTo(to web3.Address, amount *big.Int) *contract.Txn {
	return m.c.Txn("mintTo", to, amount)
}

// StateSync sends a stateSync transaction in the solidity contract
func (m *MintERC20) StateSync(to web3.Address, amount *big.Int) *contract.Txn {
	return m.c.Txn("stateSync", to, amount)
}

// Transfer sends a transfer transaction in the solidity contract
func (m *MintERC20) Transfer(recipient web3.Address, amount *big.Int) *contract.Txn {
	return m.c.Txn("transfer", recipient, amount)
}

// TransferFrom sends a transferFrom transaction in the solidity contract
func (m *MintERC20) TransferFrom(sender web3.Address, recipient web3.Address, amount *big.Int) *contract.Txn {
	return m.c.Txn("transferFrom", sender, recipient, amount)
}

// events

func (m *MintERC20) ApprovalEventSig() web3.Hash {
	return m.c.ABI().Events["Approval"].ID()
}

func (m *MintERC20) TransferEventSig() web3.Hash {
	return m.c.ABI().Events["Transfer"].ID()
}
